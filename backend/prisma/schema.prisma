generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  name              String?
  email             String              @unique
  image             String?
  role              Role                @default(USER)
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  refreshToken      String?
  problems          Problem[]
  ProblemSolved     ProblemSolved[]
  submission        Submission[]
  Playlist          Playlist[]
  ProblemInPlaylist ProblemInPlaylist[]
}

model Problem {
  id                  String              @id @default(uuid())
  title               String
  description         String
  difficulty          Difficulty
  constraints         String[]
  examples            Json
  testCases           Json
  tag                 String
  codeSnippets        Json
  hints               String[]
  editorial           String?
  createdById         String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  referenceSolution   Json
  createdBy           User                @relation(fields: [createdById], references: [id], onDelete: Cascade)
  solvedProblemByUser ProblemSolved[]
  submission          Submission[]
  ProblemInPlaylist   ProblemInPlaylist[]
}

model Submission {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  attemptCount  Int              @default(1)
  isSolved      Boolean          @default(false)
  stdin         String?
  stdout        String?
  compileOutput String?
  compileStatus String?
  lastTriedAt   DateTime         @default(now())
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  language      String
  sourceCode    Json
  status        String?
  stderr        String?
  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  testCases     TestCaseResult[]
}

model TestCaseResult {
  id             String     @id @default(uuid())
  submissionId   String
  testCaseIndex  Int
  passed         Boolean
  stdout         String
  expectedOutput String
  stderr         String?
  compileOutput  String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Submission     Submission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Playlist {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  problemsInPlaylist ProblemInPlaylist[]
}

model ProblemInPlaylist {
  id String @id @default(uuid())

  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  addedAt   DateTime @default(now())
  addedBy   User     @relation(fields: [addedById], references: [id])
  addedById String

  order Int? // optional: order of problem in playlist

  @@unique([playlistId, problemId]) // same problem can't be added twice to same playlist
}
